{"ast":null,"code":"import axios from 'axios';\nimport Router from 'next/router';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { setUserInfo, setLogin, setThemeColor, setLoading, setLoding } from '../actions/base';\nvar localURL = 'http://127.0.0.1:3000';\nvar proURL = '';\nvar instance = axios.create({\n  baseURL: \"\".concat(localURL, \"/api\"),\n  timeout: 5000\n});\ninstance.interceptors.request.use(function (config) {\n  // dispatch(setLoding(true));\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(function (response) {\n  // http status가 200인 경우\n  // 응답 바로 직전에 대해 작성\n  // .then()\n  dispatch(setLoding(false));\n  dispatch(setLogin(true));\n  return response;\n}, function (error) {\n  /*\n      http status가 200이 아닌 경우\n      응답 에러 처리\n      .catch()\n  */\n  if (error.response) {\n    if (error.response.status === 401) {\n      if (!(error.response.data.message === 'Mismatched pwd')) {\n        alert('아이디나 비밀번호를 확인해주세요.');\n      }\n    } else if (error.response.status === 400) {\n      Router.push('/login');\n      dispatch(setLogin(false));\n      dispatch(setUserInfo(undefined));\n      dispatch(setThemeColor('#7c7cec'));\n    } else if (error.response.status === 404) {\n      alert('누락된 요청');\n    } else if (error.response.status >= 500) {\n      alert('서버 에러가 발생했습니다.관리자에게 문의해주세요.');\n    }\n  }\n\n  return Promise.reject(error);\n});\nexport default instance;\nvar Loading = styled.img.withConfig({\n  displayName: \"apiSend__Loading\",\n  componentId: \"sc-5vlrbx-0\"\n})([\"position:absolute;z-index:101;width:64px;height:64px;top:50%;left:50%;\"]);","map":{"version":3,"sources":["/Users/hj/develop/myproject/myDiary/client/src/utils/apiSend.js"],"names":["axios","Router","useDispatch","styled","setUserInfo","setLogin","setThemeColor","setLoading","setLoding","localURL","proURL","instance","create","baseURL","timeout","interceptors","request","use","config","error","Promise","reject","response","dispatch","status","data","message","alert","push","undefined","Loading","img"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,aAAhC,EAA+CC,UAA/C,EAA2DC,SAA3D,QAA4E,iBAA5E;AACA,IAAMC,QAAQ,GAAG,uBAAjB;AACA,IAAMC,MAAM,GAAG,EAAf;AACA,IAAMC,QAAQ,GAAGX,KAAK,CAACY,MAAN,CAAa;AAC5BC,EAAAA,OAAO,YAAKJ,QAAL,SADqB;AAE5BK,EAAAA,OAAO,EAAE;AAFmB,CAAb,CAAjB;AAKAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACE,UAASC,MAAT,EAAiB;AACf;AACA,SAAOA,MAAP;AACD,CAJH,EAKE,UAASC,KAAT,EAAgB;AACd,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAPH;AASAR,QAAQ,CAACI,YAAT,CAAsBO,QAAtB,CAA+BL,GAA/B,CACE,UAASK,QAAT,EAAmB;AACjB;AACA;AACA;AACAC,EAAAA,QAAQ,CAACf,SAAS,CAAC,KAAD,CAAV,CAAR;AACAe,EAAAA,QAAQ,CAAClB,QAAQ,CAAC,IAAD,CAAT,CAAR;AACA,SAAOiB,QAAP;AACD,CARH,EAUE,UAASH,KAAT,EAAgB;AACd;;;;;AAKA,MAAIA,KAAK,CAACG,QAAV,EAAoB;AAClB,QAAIH,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAA9B,EAAmC;AACjC,UAAI,EAAEL,KAAK,CAACG,QAAN,CAAeG,IAAf,CAAoBC,OAApB,KAAgC,gBAAlC,CAAJ,EAAyD;AACvDC,QAAAA,KAAK,CAAC,oBAAD,CAAL;AACD;AACF,KAJD,MAIO,IAAIR,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAA9B,EAAmC;AACxCvB,MAAAA,MAAM,CAAC2B,IAAP,CAAY,QAAZ;AACAL,MAAAA,QAAQ,CAAClB,QAAQ,CAAC,KAAD,CAAT,CAAR;AACAkB,MAAAA,QAAQ,CAACnB,WAAW,CAACyB,SAAD,CAAZ,CAAR;AACAN,MAAAA,QAAQ,CAACjB,aAAa,CAAC,SAAD,CAAd,CAAR;AACD,KALM,MAKA,IAAIa,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAA9B,EAAmC;AACxCG,MAAAA,KAAK,CAAC,QAAD,CAAL;AACD,KAFM,MAEA,IAAIR,KAAK,CAACG,QAAN,CAAeE,MAAf,IAAyB,GAA7B,EAAkC;AACvCG,MAAAA,KAAK,CAAC,6BAAD,CAAL;AACD;AACF;;AACD,SAAOP,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAjCH;AAmCA,eAAeR,QAAf;AACA,IAAMmB,OAAO,GAAG3B,MAAM,CAAC4B,GAAV;AAAA;AAAA;AAAA,8EAAb","sourcesContent":["import axios from 'axios';\nimport Router from 'next/router';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { setUserInfo, setLogin, setThemeColor, setLoading, setLoding } from '../actions/base';\nconst localURL = 'http://127.0.0.1:3000';\nconst proURL = '';\nconst instance = axios.create({\n  baseURL: `${localURL}/api`,\n  timeout: 5000\n});\n\ninstance.interceptors.request.use(\n  function(config) {\n    // dispatch(setLoding(true));\n    return config;\n  },\n  function(error) {\n    return Promise.reject(error);\n  }\n);\ninstance.interceptors.response.use(\n  function(response) {\n    // http status가 200인 경우\n    // 응답 바로 직전에 대해 작성\n    // .then()\n    dispatch(setLoding(false));\n    dispatch(setLogin(true));\n    return response;\n  },\n\n  function(error) {\n    /*\n        http status가 200이 아닌 경우\n        응답 에러 처리\n        .catch()\n    */\n    if (error.response) {\n      if (error.response.status === 401) {\n        if (!(error.response.data.message === 'Mismatched pwd')) {\n          alert('아이디나 비밀번호를 확인해주세요.');\n        }\n      } else if (error.response.status === 400) {\n        Router.push('/login');\n        dispatch(setLogin(false));\n        dispatch(setUserInfo(undefined));\n        dispatch(setThemeColor('#7c7cec'));\n      } else if (error.response.status === 404) {\n        alert('누락된 요청');\n      } else if (error.response.status >= 500) {\n        alert('서버 에러가 발생했습니다.관리자에게 문의해주세요.');\n      }\n    }\n    return Promise.reject(error);\n  }\n);\nexport default instance;\nconst Loading = styled.img`\n  position: absolute;\n  z-index: 101;\n  width: 64px;\n  height: 64px;\n  top: 50%;\n  left: 50%;\n`;\n"]},"metadata":{},"sourceType":"module"}