{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/hj/develop/myproject/myDiary/client/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\n  html{\\n        width:100%;\\n        height:100%;\\n  };\\n  body{\\n        margin:0;\\n        padding:0;\\n        width:100%;\\n        height:100%;\\n        position: relative;\\n        font-family: \", \";\\n        font-size:\", \";\\n        background:#fcfcfc;\\n        /* font-family: 'Noto Sans KR', sans-serif; */\\n        /* font-family: 'Noto Serif KR', serif; */\\n        /* font-family: 'Nanum Gothic Coding', monospace; */\\n  };\\n  #__next{  \\n            max-width:767px;\\n            min-height:100%;\\n            box-sizing:border-box;\\n            margin: 0 auto;\\n            border-left: 1px solid #dedede;\\n            border-right: 1px solid #dedede;\\n            background: #fff;\\n  };\\n  a {\\n      text-decoration:none; \\n      outline:none;        \\n  };\\n  ul{\\n      list-style:none;\\n  };\\n  button{\\n    font-family: \", \";\\n    :hover {\\n    opacity: 1;\\n    }\\n  }\\n  ::-webkit-input-placeholder {\\n    font-family: \", \";\\n}\\ninput{\\n  font-family: \", \";\\n  font-size:\", \";\\n}\\ntextarea{\\n  font-family: \", \";\\n  font-size:\", \";\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { Provider, useSelector } from 'react-redux';\nimport store from '../src/store';\nimport { theme } from '../src/utils/theme';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { loginCheck } from '../src/api/auth';\nvar GlobalStyle = createGlobalStyle(_templateObject(), function (props) {\n  return props.selectFont;\n}, function (props) {\n  return props.theme.mFont;\n}, function (props) {\n  return props.selectFont;\n}, function (props) {\n  return props.selectFont;\n}, function (props) {\n  return props.selectFont;\n}, function (props) {\n  return props.theme.mFont;\n}, function (props) {\n  return props.selectFont;\n}, function (props) {\n  return props.theme.mFont;\n});\nexport default function MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _useState = useState('#ff254f'),\n      currentColor = _useState[0],\n      setCurrentColor = _useState[1]; // const a = store.common.selectFont;\n  // console.log(a, 'a');\n  // const selectFont = store.getState().common.selectFont;\n  // const selectFont = useSelector(state => state.common.selectFont);\n  // console.log(selectFont, 'sel');\n  // useEffect(() => {\n  //   const storedToken = localStorage.getItem('mydiary_token') && localStorage.getItem('mydiary_token');\n  //   const config = {\n  //     access_token: storedToken\n  //   };\n  //   loginCheck(config).then(res => {\n  //     if (res.status === 200 && res.data) {\n  //       dispatch(setFont(res.data.user_font));\n  //     }\n  //   });\n  // }, []);\n  // const storedFont = useSelector(state => state.common.selectFont);\n  // console.log(storedFont, 'storedFont');\n\n\n  useEffect(function () {\n    function handleSubscribe() {\n      var newColor = store.getState().common.userColor;\n\n      if (newColor !== currentColor) {\n        setCurrentColor(newColor);\n      }\n    }\n\n    var subscribeStore = store.subscribe(handleSubscribe);\n    return function () {\n      return subscribeStore();\n    };\n  }, [currentColor]);\n\n  function select(state) {\n    console.log(state.common, 'state,common');\n    return state.common.selectFont;\n  }\n\n  var currentValue;\n\n  function handleChange() {\n    var previousValue = currentValue;\n    currentValue = select(store.getState());\n\n    if (previousValue !== currentValue) {\n      console.log('Some deep nested property changed from', previousValue, 'to', currentValue);\n    }\n  }\n\n  var unsubscribe = store.subscribe(handleChange);\n  unsubscribe();\n  return __jsx(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, __jsx(GlobalStyle, {\n    theme: theme,\n    userTheme: currentColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), __jsx(ThemeProvider, {\n    theme: theme,\n    userColor: currentColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/hj/develop/myproject/myDiary/client/pages/_app.js"],"names":["React","useEffect","useState","createGlobalStyle","ThemeProvider","Provider","useSelector","store","theme","loginCheck","GlobalStyle","props","selectFont","mFont","MyApp","Component","pageProps","currentColor","setCurrentColor","handleSubscribe","newColor","getState","common","userColor","subscribeStore","subscribe","select","state","console","log","currentValue","handleChange","previousValue","unsubscribe"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,mBAAjD;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,aAAtC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,OAAO,qCAAP;AACA,OAAO,4CAAP;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,IAAMC,WAAW,GAAGP,iBAAH,oBAYM,UAAAQ,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAV;AAAA,CAZX,EAaG,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACH,KAAN,CAAYK,KAAhB;AAAA,CAbR,EAoCE,UAAAF,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAV;AAAA,CApCP,EA0CE,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAV;AAAA,CA1CP,EA6CA,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAV;AAAA,CA7CL,EA8CH,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACH,KAAN,CAAYK,KAAhB;AAAA,CA9CF,EAiDA,UAAAF,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAV;AAAA,CAjDL,EAkDH,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACH,KAAN,CAAYK,KAAhB;AAAA,CAlDF,CAAjB;AAsDA,eAAe,SAASC,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;;AAAA,kBACdd,QAAQ,CAAC,SAAD,CADM;AAAA,MAC/Ce,YAD+C;AAAA,MACjCC,eADiC,iBAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjB,EAAAA,SAAS,CAAC,YAAM;AACd,aAASkB,eAAT,GAA2B;AACzB,UAAMC,QAAQ,GAAGb,KAAK,CAACc,QAAN,GAAiBC,MAAjB,CAAwBC,SAAzC;;AACA,UAAIH,QAAQ,KAAKH,YAAjB,EAA+B;AAC7BC,QAAAA,eAAe,CAACE,QAAD,CAAf;AACD;AACF;;AACD,QAAMI,cAAc,GAAGjB,KAAK,CAACkB,SAAN,CAAgBN,eAAhB,CAAvB;AACA,WAAO;AAAA,aAAMK,cAAc,EAApB;AAAA,KAAP;AACD,GATQ,EASN,CAACP,YAAD,CATM,CAAT;;AAWA,WAASS,MAAT,CAAgBC,KAAhB,EAAuB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACL,MAAlB,EAA0B,cAA1B;AACA,WAAOK,KAAK,CAACL,MAAN,CAAaV,UAApB;AACD;;AAED,MAAIkB,YAAJ;;AACA,WAASC,YAAT,GAAwB;AACtB,QAAIC,aAAa,GAAGF,YAApB;AACAA,IAAAA,YAAY,GAAGJ,MAAM,CAACnB,KAAK,CAACc,QAAN,EAAD,CAArB;;AAEA,QAAIW,aAAa,KAAKF,YAAtB,EAAoC;AAClCF,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDG,aAAtD,EAAqE,IAArE,EAA2EF,YAA3E;AACD;AACF;;AAED,MAAMG,WAAW,GAAG1B,KAAK,CAACkB,SAAN,CAAgBM,YAAhB,CAApB;AACAE,EAAAA,WAAW;AACX,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAE1B,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEC,KAApB;AAA2B,IAAA,SAAS,EAAES,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAET,KAAtB;AAA6B,IAAA,SAAS,EAAES,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAFF,CADF;AAQD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { Provider, useSelector } from 'react-redux';\nimport store from '../src/store';\nimport { theme } from '../src/utils/theme';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { loginCheck } from '../src/api/auth';\n\nconst GlobalStyle = createGlobalStyle`\n\n  html{\n        width:100%;\n        height:100%;\n  };\n  body{\n        margin:0;\n        padding:0;\n        width:100%;\n        height:100%;\n        position: relative;\n        font-family: ${props => props.selectFont};\n        font-size:${props => props.theme.mFont};\n        background:#fcfcfc;\n        /* font-family: 'Noto Sans KR', sans-serif; */\n        /* font-family: 'Noto Serif KR', serif; */\n        /* font-family: 'Nanum Gothic Coding', monospace; */\n  };\n  #__next{  \n            max-width:767px;\n            min-height:100%;\n            box-sizing:border-box;\n            margin: 0 auto;\n            border-left: 1px solid #dedede;\n            border-right: 1px solid #dedede;\n            background: #fff;\n  };\n  a {\n      text-decoration:none; \n      outline:none;        \n  };\n  ul{\n      list-style:none;\n  };\n  button{\n    font-family: ${props => props.selectFont};\n    :hover {\n    opacity: 1;\n    }\n  }\n  ::-webkit-input-placeholder {\n    font-family: ${props => props.selectFont};\n}\ninput{\n  font-family: ${props => props.selectFont};\n  font-size:${props => props.theme.mFont};\n}\ntextarea{\n  font-family: ${props => props.selectFont};\n  font-size:${props => props.theme.mFont};\n}\n`;\n\nexport default function MyApp({ Component, pageProps }) {\n  const [currentColor, setCurrentColor] = useState('#ff254f');\n  // const a = store.common.selectFont;\n  // console.log(a, 'a');\n  // const selectFont = store.getState().common.selectFont;\n  // const selectFont = useSelector(state => state.common.selectFont);\n  // console.log(selectFont, 'sel');\n  // useEffect(() => {\n  //   const storedToken = localStorage.getItem('mydiary_token') && localStorage.getItem('mydiary_token');\n  //   const config = {\n  //     access_token: storedToken\n  //   };\n  //   loginCheck(config).then(res => {\n  //     if (res.status === 200 && res.data) {\n  //       dispatch(setFont(res.data.user_font));\n  //     }\n  //   });\n  // }, []);\n  // const storedFont = useSelector(state => state.common.selectFont);\n  // console.log(storedFont, 'storedFont');\n  useEffect(() => {\n    function handleSubscribe() {\n      const newColor = store.getState().common.userColor;\n      if (newColor !== currentColor) {\n        setCurrentColor(newColor);\n      }\n    }\n    const subscribeStore = store.subscribe(handleSubscribe);\n    return () => subscribeStore();\n  }, [currentColor]);\n\n  function select(state) {\n    console.log(state.common, 'state,common');\n    return state.common.selectFont;\n  }\n\n  let currentValue;\n  function handleChange() {\n    let previousValue = currentValue;\n    currentValue = select(store.getState());\n\n    if (previousValue !== currentValue) {\n      console.log('Some deep nested property changed from', previousValue, 'to', currentValue);\n    }\n  }\n\n  const unsubscribe = store.subscribe(handleChange);\n  unsubscribe();\n  return (\n    <Provider store={store}>\n      <GlobalStyle theme={theme} userTheme={currentColor} />\n      <ThemeProvider theme={theme} userColor={currentColor}>\n        <Component {...pageProps} />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}