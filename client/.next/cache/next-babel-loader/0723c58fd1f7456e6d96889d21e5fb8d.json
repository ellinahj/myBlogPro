{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/hj/develop/myproject/myDiary/client/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\n  html{\\n        width:100%;\\n        height:100%;\\n  };\\n  body{\\n        margin:0;\\n        padding:0;\\n        width:100%;\\n        height:100%;\\n        position: relative;\\n        font-family: \", \";\\n        font-size:\", \";\\n        background:#fcfcfc;\\n        /* font-family: 'Noto Sans KR', sans-serif; */\\n        /* font-family: 'Noto Serif KR', serif; */\\n        /* font-family: 'Nanum Gothic Coding', monospace; */\\n  };\\n  #__next{  \\n            max-width:767px;\\n            min-height:100%;\\n            box-sizing:border-box;\\n            margin: 0 auto;\\n            border-left: 1px solid #dedede;\\n            border-right: 1px solid #dedede;\\n            background: #fff;\\n  };\\n  a {\\n      text-decoration:none; \\n      outline:none;        \\n  };\\n  ul{\\n      list-style:none;\\n  };\\n  button{\\n    font-family: \", \";\\n    :hover {\\n    opacity: 1;\\n    }\\n  }\\n  ::-webkit-input-placeholder {\\n    font-family: \", \";\\n}\\ninput{\\n  font-family: \", \";\\n  font-size:\", \";\\n}\\ntextarea{\\n  font-family: \", \";\\n  font-size:\", \";\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport store from '../src/store';\nimport { theme } from '../src/utils/theme';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { setFont } from '../src/actions/base';\nvar GlobalStyle = createGlobalStyle(_templateObject(), function (props) {\n  return props.selectFont;\n}, function (props) {\n  return props.theme.mFont;\n}, function (props) {\n  return props.selectFont;\n}, function (props) {\n  return props.selectFont;\n}, function (props) {\n  return props.selectFont;\n}, function (props) {\n  return props.theme.mFont;\n}, function (props) {\n  return props.selectFont;\n}, function (props) {\n  return props.theme.mFont;\n});\nexport default function MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _useState = useState('#ff254f'),\n      currentColor = _useState[0],\n      setCurrentColor = _useState[1];\n\n  var selectFont = store.getState().common.selectFont;\n  console.log(selectFont, 'sel');\n  useEffect(function () {\n    function handleSubscribe() {\n      var newColor = store.getState().common.userColor;\n\n      if (newColor !== currentColor) {\n        setCurrentColor(newColor);\n      }\n    }\n\n    var subscribeStore = store.subscribe(handleSubscribe);\n    return function () {\n      return subscribeStore();\n    };\n  }, [currentColor]);\n  return __jsx(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, __jsx(GlobalStyle, {\n    theme: theme,\n    userTheme: currentColor,\n    selectFont: setFont,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), __jsx(ThemeProvider, {\n    theme: theme,\n    userColor: currentColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/hj/develop/myproject/myDiary/client/pages/_app.js"],"names":["React","useEffect","useState","createGlobalStyle","ThemeProvider","Provider","store","theme","setFont","GlobalStyle","props","selectFont","mFont","MyApp","Component","pageProps","currentColor","setCurrentColor","getState","common","console","log","handleSubscribe","newColor","userColor","subscribeStore","subscribe"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,mBAAjD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,OAAO,qCAAP;AACA,OAAO,4CAAP;AACA,SAASC,OAAT,QAAwB,qBAAxB;AAEA,IAAMC,WAAW,GAAGN,iBAAH,oBAYM,UAAAO,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAV;AAAA,CAZX,EAaG,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACH,KAAN,CAAYK,KAAhB;AAAA,CAbR,EAoCE,UAAAF,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAV;AAAA,CApCP,EA0CE,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAV;AAAA,CA1CP,EA6CA,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAV;AAAA,CA7CL,EA8CH,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACH,KAAN,CAAYK,KAAhB;AAAA,CA9CF,EAiDA,UAAAF,KAAK;AAAA,SAAIA,KAAK,CAACC,UAAV;AAAA,CAjDL,EAkDH,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACH,KAAN,CAAYK,KAAhB;AAAA,CAlDF,CAAjB;AAsDA,eAAe,SAASC,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;;AAAA,kBACdb,QAAQ,CAAC,SAAD,CADM;AAAA,MAC/Cc,YAD+C;AAAA,MACjCC,eADiC;;AAEtD,MAAMN,UAAU,GAAGL,KAAK,CAACY,QAAN,GAAiBC,MAAjB,CAAwBR,UAA3C;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ,EAAwB,KAAxB;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACd,aAASqB,eAAT,GAA2B;AACzB,UAAMC,QAAQ,GAAGjB,KAAK,CAACY,QAAN,GAAiBC,MAAjB,CAAwBK,SAAzC;;AACA,UAAID,QAAQ,KAAKP,YAAjB,EAA+B;AAC7BC,QAAAA,eAAe,CAACM,QAAD,CAAf;AACD;AACF;;AACD,QAAME,cAAc,GAAGnB,KAAK,CAACoB,SAAN,CAAgBJ,eAAhB,CAAvB;AACA,WAAO;AAAA,aAAMG,cAAc,EAApB;AAAA,KAAP;AACD,GATQ,EASN,CAACT,YAAD,CATM,CAAT;AAWA,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEV,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEC,KAApB;AAA2B,IAAA,SAAS,EAAES,YAAtC;AAAoD,IAAA,UAAU,EAAER,OAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAED,KAAtB;AAA6B,IAAA,SAAS,EAAES,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAFF,CADF;AAQD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport store from '../src/store';\nimport { theme } from '../src/utils/theme';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { setFont } from '../src/actions/base';\n\nconst GlobalStyle = createGlobalStyle`\n\n  html{\n        width:100%;\n        height:100%;\n  };\n  body{\n        margin:0;\n        padding:0;\n        width:100%;\n        height:100%;\n        position: relative;\n        font-family: ${props => props.selectFont};\n        font-size:${props => props.theme.mFont};\n        background:#fcfcfc;\n        /* font-family: 'Noto Sans KR', sans-serif; */\n        /* font-family: 'Noto Serif KR', serif; */\n        /* font-family: 'Nanum Gothic Coding', monospace; */\n  };\n  #__next{  \n            max-width:767px;\n            min-height:100%;\n            box-sizing:border-box;\n            margin: 0 auto;\n            border-left: 1px solid #dedede;\n            border-right: 1px solid #dedede;\n            background: #fff;\n  };\n  a {\n      text-decoration:none; \n      outline:none;        \n  };\n  ul{\n      list-style:none;\n  };\n  button{\n    font-family: ${props => props.selectFont};\n    :hover {\n    opacity: 1;\n    }\n  }\n  ::-webkit-input-placeholder {\n    font-family: ${props => props.selectFont};\n}\ninput{\n  font-family: ${props => props.selectFont};\n  font-size:${props => props.theme.mFont};\n}\ntextarea{\n  font-family: ${props => props.selectFont};\n  font-size:${props => props.theme.mFont};\n}\n`;\n\nexport default function MyApp({ Component, pageProps }) {\n  const [currentColor, setCurrentColor] = useState('#ff254f');\n  const selectFont = store.getState().common.selectFont;\n  console.log(selectFont, 'sel');\n\n  useEffect(() => {\n    function handleSubscribe() {\n      const newColor = store.getState().common.userColor;\n      if (newColor !== currentColor) {\n        setCurrentColor(newColor);\n      }\n    }\n    const subscribeStore = store.subscribe(handleSubscribe);\n    return () => subscribeStore();\n  }, [currentColor]);\n\n  return (\n    <Provider store={store}>\n      <GlobalStyle theme={theme} userTheme={currentColor} selectFont={setFont} />\n      <ThemeProvider theme={theme} userColor={currentColor}>\n        <Component {...pageProps} />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}