{"ast":null,"code":"var _jsxFileName = \"/Users/hj/develop/myproject/myDiary/client/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { Provider, useSelector } from 'react-redux';\nimport store from '../src/store';\nimport { theme } from '../src/utils/theme';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { loginCheck } from '../src/api/auth';\nconst GlobalStyle = createGlobalStyle`\n\n  html{\n        width:100%;\n        height:100%;\n  };\n  body{\n        margin:0;\n        padding:0;\n        width:100%;\n        height:100%;\n        position: relative;\n        font-family: ${props => props.selectFont};\n        font-size:${props => props.theme.mFont};\n        background:#fcfcfc;\n        /* font-family: 'Noto Sans KR', sans-serif; */\n        /* font-family: 'Noto Serif KR', serif; */\n        /* font-family: 'Nanum Gothic Coding', monospace; */\n  };\n  #__next{  \n            max-width:767px;\n            min-height:100%;\n            box-sizing:border-box;\n            margin: 0 auto;\n            border-left: 1px solid #dedede;\n            border-right: 1px solid #dedede;\n            background: #fff;\n  };\n  a {\n      text-decoration:none; \n      outline:none;        \n  };\n  ul{\n      list-style:none;\n  };\n  button{\n    font-family: ${props => props.selectFont};\n    :hover {\n    opacity: 1;\n    }\n  }\n  ::-webkit-input-placeholder {\n    font-family: ${props => props.selectFont};\n}\ninput{\n  font-family: ${props => props.selectFont};\n  font-size:${props => props.theme.mFont};\n}\ntextarea{\n  font-family: ${props => props.selectFont};\n  font-size:${props => props.theme.mFont};\n}\n`;\nexport default function MyApp({\n  Component,\n  pageProps\n}) {\n  const {\n    0: currentColor,\n    1: setCurrentColor\n  } = useState('#ff254f'); // const selectFont = store.getState().common.selectFont;\n\n  const selectFont = useSelector(state => state.common.selectFont);\n  console.log(selectFont, 'sel');\n  useEffect(() => {\n    const storedToken = localStorage.getItem('mydiary_token') && localStorage.getItem('mydiary_token');\n    const config = {\n      access_token: storedToken\n    };\n    loginCheck(config).then(res => {\n      if (res.status === 200 && res.data) {\n        dispatch(setFont(res.data.user_font));\n      }\n    });\n  }, []); // const storedFont = useSelector(state => state.common.selectFont);\n  // console.log(storedFont, 'storedFont');\n\n  useEffect(() => {\n    function handleSubscribe() {\n      const newColor = store.getState().common.userColor;\n\n      if (newColor !== currentColor) {\n        setCurrentColor(newColor);\n      }\n    }\n\n    const subscribeStore = store.subscribe(handleSubscribe);\n    return () => subscribeStore();\n  }, [currentColor]);\n  return __jsx(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, __jsx(GlobalStyle, {\n    theme: theme,\n    userTheme: currentColor,\n    selectFont: selectFont,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), __jsx(ThemeProvider, {\n    theme: theme,\n    userColor: currentColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/hj/develop/myproject/myDiary/client/pages/_app.js"],"names":["React","useEffect","useState","createGlobalStyle","ThemeProvider","Provider","useSelector","store","theme","loginCheck","GlobalStyle","props","selectFont","mFont","MyApp","Component","pageProps","currentColor","setCurrentColor","state","common","console","log","storedToken","localStorage","getItem","config","access_token","then","res","status","data","dispatch","setFont","user_font","handleSubscribe","newColor","getState","userColor","subscribeStore","subscribe"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { Provider, useSelector } from 'react-redux';\nimport store from '../src/store';\nimport { theme } from '../src/utils/theme';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { loginCheck } from '../src/api/auth';\n\nconst GlobalStyle = createGlobalStyle`\n\n  html{\n        width:100%;\n        height:100%;\n  };\n  body{\n        margin:0;\n        padding:0;\n        width:100%;\n        height:100%;\n        position: relative;\n        font-family: ${props => props.selectFont};\n        font-size:${props => props.theme.mFont};\n        background:#fcfcfc;\n        /* font-family: 'Noto Sans KR', sans-serif; */\n        /* font-family: 'Noto Serif KR', serif; */\n        /* font-family: 'Nanum Gothic Coding', monospace; */\n  };\n  #__next{  \n            max-width:767px;\n            min-height:100%;\n            box-sizing:border-box;\n            margin: 0 auto;\n            border-left: 1px solid #dedede;\n            border-right: 1px solid #dedede;\n            background: #fff;\n  };\n  a {\n      text-decoration:none; \n      outline:none;        \n  };\n  ul{\n      list-style:none;\n  };\n  button{\n    font-family: ${props => props.selectFont};\n    :hover {\n    opacity: 1;\n    }\n  }\n  ::-webkit-input-placeholder {\n    font-family: ${props => props.selectFont};\n}\ninput{\n  font-family: ${props => props.selectFont};\n  font-size:${props => props.theme.mFont};\n}\ntextarea{\n  font-family: ${props => props.selectFont};\n  font-size:${props => props.theme.mFont};\n}\n`;\n\nexport default function MyApp({ Component, pageProps }) {\n  const [currentColor, setCurrentColor] = useState('#ff254f');\n\n  // const selectFont = store.getState().common.selectFont;\n  const selectFont = useSelector(state => state.common.selectFont);\n  console.log(selectFont, 'sel');\n  useEffect(() => {\n    const storedToken = localStorage.getItem('mydiary_token') && localStorage.getItem('mydiary_token');\n    const config = {\n      access_token: storedToken\n    };\n    loginCheck(config).then(res => {\n      if (res.status === 200 && res.data) {\n        dispatch(setFont(res.data.user_font));\n      }\n    });\n  }, []);\n  // const storedFont = useSelector(state => state.common.selectFont);\n  // console.log(storedFont, 'storedFont');\n  useEffect(() => {\n    function handleSubscribe() {\n      const newColor = store.getState().common.userColor;\n      if (newColor !== currentColor) {\n        setCurrentColor(newColor);\n      }\n    }\n    const subscribeStore = store.subscribe(handleSubscribe);\n    return () => subscribeStore();\n  }, [currentColor]);\n\n  return (\n    <Provider store={store}>\n      <GlobalStyle theme={theme} userTheme={currentColor} selectFont={selectFont} />\n      <ThemeProvider theme={theme} userColor={currentColor}>\n        <Component {...pageProps} />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}