{"version":3,"file":"static/webpack/static/development/pages/post.js.e564ddd44e6c4b79d086.hot-update.js","sources":["webpack:///./src/containers/blog/PostContainer.js"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport React, { useState, useEffect } from 'react';\nimport DatePicker, { registerLocale } from 'react-datepicker';\nimport ko from 'date-fns/locale/ko';\nregisterLocale('ko', ko);\n\nimport styled from 'styled-components';\nimport Con from '../../components/common/Container';\nimport UploadComponent from '../../components/blog/ThreePhotoUpload';\nimport { setBlog, getCate } from '../../../src/api/blog';\nimport { BasicTitle, theme } from '../../utils/theme';\nimport Router from 'next/router';\nimport { setClickMenu, setCategory } from '../../actions/base';\nimport { set } from 'date-fns';\n\nexport default function addContainer(props) {\n  const dispatch = useDispatch();\n  const [startDate, setStartDate] = useState(new Date());\n  const [imgFile, setImgFile] = useState('');\n  const [value, setValue] = useState({\n    cate: 0,\n    title: '',\n    location: '',\n    comment: ''\n  });\n  const [test, setTest] = useState({});\n  const userColor = useSelector(state => state.common.userColor);\n  const clickMenu = useSelector(state => state.common.clickMenu);\n  const category = useSelector(state => state.common.category);\n\n  const handleData = e => {\n    // console.log(e, 'e');\n    setValue({ ...value, [e.target.name]: e.target.value });\n  };\n\n  // const handleDateChange = date => {\n  //   setStartDate(date);\n  // };\n\n  const checked = id => {\n    setValue({ ...value, cate: id });\n  };\n  // console.log(clickMenu, 'clickMenu');\n  const imgFormData = file => {\n    setImgFile(file);\n  };\n\n  useEffect(() => {\n    const getToken = localStorage.getItem('mydiary_token');\n    if (getToken) {\n      const config = {\n        access_token: getToken\n      };\n      getCate(config).then(res => {\n        if (res.status === 200 && res.data) {\n          dispatch(setCategory(res.data.data));\n          // console.log(res.data.data, 'rerere');\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!category) {\n      return;\n    }\n    setValue({ cate: category[0].id, title: '', location: '', comment: '' });\n  }, [category]);\n\n  const submit = () => {\n    if (value.title.length > 0 && value.comment.length > 0) {\n      const existFileItems = imgFile.filter(item => item !== null);\n      const formData = new FormData();\n\n      existFileItems && existFileItems.forEach(item => formData.append(`file`, item));\n      const data = value;\n      const numDate = Date.parse(startDate);\n      data.date = numDate;\n      formData.append('data', JSON.stringify(data));\n      console.log(formData, 'formdata');\n      console.log(startDate, 'start');\n\n      const getToken = localStorage.getItem('mydiary_token');\n      if (getToken) {\n        const config = {\n          access_token: getToken\n        };\n        setBlog(config, formData).then(res => {\n          console.log(res, 'res');\n          if (res.status === 200) {\n            // alert('등록되었습니다.');\n            Router.push('/blog');\n            dispatch(setClickMenu({ cateId: value.cate }));\n          }\n        });\n      }\n    } else {\n      alert('제목과 내용은 필수항목입니다.');\n    }\n  };\n\n  return (\n    <Contaniner>\n      <Row>\n        <Subject>분류</Subject>\n        {category &&\n          category.length > 0 &&\n          category.map((item, index) => {\n            return (\n              <CateWrap>\n                <label className=\"radio_container\" key={index} userColor={userColor}>\n                  {item.title}\n                  <input\n                    type=\"radio\"\n                    onChange={e => checked(item.id)}\n                    checked={item.id === value.cate}\n                    autoComplete=\"off\"\n                  />\n                  <span className=\"checkmark\" />\n                </label>\n              </CateWrap>\n            );\n          })}\n      </Row>\n      <Row>\n        <Subject>제목</Subject>\n        <Input type=\"text\" name=\"title\" value={value.title} onChange={handleData} autoComplete=\"off\" />\n      </Row>\n      {/* <Row>\n        <Subject>날짜</Subject>\n        <DatePicker\n          name=\"date\"\n          selected={startDate}\n          onChange={handleDateChange}\n          dateFormat=\"Pp\"\n          locale=\"ko\"\n          showTimeSelect\n          timeFormat=\"HH:mm\"\n          showPopperArrow={false}\n          showPopperArrow={false}\n          timeIntervals={30}\n          dateFormat=\"yyyy/MM/dd aa hh:mm\"\n          placeholderText=\"날짜 선택\"\n        />\n      </Row> */}\n      <Row>\n        <Subject>장소</Subject>\n        <Input\n          type=\"text\"\n          name=\"location\"\n          value={value.location}\n          width={150}\n          onChange={handleData}\n          autoComplete=\"off\"\n        />\n      </Row>\n      <Row>\n        <div>\n          <Subject>내용</Subject>\n          <CountRow>\n            <CountComment>\n              {value.comment && value.comment.length <= MAX_COMMENT ? value.comment.length : 0}\n            </CountComment>\n            <Slush>/</Slush>\n            <Maxcount>{MAX_COMMENT}</Maxcount>\n          </CountRow>\n        </div>\n        <Textarea\n          type=\"text\"\n          maxLength=\"200\"\n          name=\"comment\"\n          value={value.comment}\n          onChange={handleData}\n          autoComplete=\"off\"\n        />\n      </Row>\n      <Row>\n        <Subject>사진첨부</Subject>\n        <UploadComponent imgFormData={e => imgFormData(e)} />\n      </Row>\n      <RowRight>\n        <Col>\n          <SubmitBtn onClick={e => submit(e)}>저장</SubmitBtn>\n        </Col>\n      </RowRight>\n    </Contaniner>\n  );\n}\nconst Contaniner = styled(Con)`\n  display: flex;\n  flex-direction: column;\n`;\nconst CateWrap = styled.div`\n  @media (max-width: 768px) {\n    margin-top: 15px;\n  }\n`;\nconst Row = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  padding: 20px 15px;\n  box-sizing: border-box;\n  align-items: center;\n  @media (max-width: 768px) {\n    display: block;\n  }\n  .end {\n    margin-left: auto;\n  }\n  .react-datepicker__input-container input {\n    height: 30px;\n    font-size: 15px;\n    line-height: 30px;\n    padding-left: 5px;\n    background: #eee;\n    outline: none;\n    border: 0;\n    border-radius: 5px;\n    ::placeholder {\n      color: #000;\n    }\n  }\n  .radio_container {\n    display: block;\n    position: relative;\n    padding-left: 30px;\n    margin-right: 30px;\n    cursor: pointer;\n    font-size: 16px;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n  .radio_container input {\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n    height: 0;\n    width: 0;\n  }\n  .checkmark {\n    position: absolute;\n    top: 0px;\n    left: 0;\n    height: 21px;\n    width: 21px;\n    background: ${props => props.userColor || '#aaa'};\n    border-radius: 50%;\n  }\n  .radio_container:hover input ~ .checkmark {\n    background-color: ${props => props.userColor || '#aaa'};\n  }\n  .radio_container input:checked ~ .checkmark {\n    background-color: ${props => props.userColor || '#aaa'};\n  }\n  .checkmark:after {\n    content: '';\n    position: absolute;\n    display: none;\n  }\n  .radio_container input:checked ~ .checkmark:after {\n    display: block;\n  }\n  .radio_container .checkmark:after {\n    top: 7px;\n    left: 7px;\n    width: 6px;\n    height: 6px;\n    border-radius: 50%;\n    background: ${props => props.userColor || '#fff'};\n  }\n`;\nconst Col = styled.div`\n  display: inline-flex;\n  svg:hover {\n    fill: ${props => props.userColor};\n    cursor: pointer;\n  }\n`;\nconst Subject = styled.div`\n  margin-right: 20px;\n  white-space: pre;\n  ${BasicTitle}\n`;\nconst Input = styled.input`\n  /* flex: 1; */\n  height: 30px;\n  border: none;\n  background: #eee;\n  border-radius: 5px;\n  width: ${props => props.width}px;\n  flex: ${props => !props.width && 1};\n  @media screen and (max-width: 768px) {\n    width: 100%;\n    margin-top: 20px;\n  }\n`;\nconst Textarea = styled.textarea`\n  flex: 1;\n  min-height: 200px;\n  @media screen and (max-width: 768px) {\n    width: 100%;\n    margin-top: 20px;\n  }\n`;\nconst SubmitBtn = styled.button`\n  padding: 5px 10px;\n  cursor: pointer;\n  font-size: 16px;\n`;\nconst RowRight = styled(Row)`\n  justify-content: center;\n`;\nconst CountRow = styled.div`\n  display: flex;\n  margin: 10px 20px 0 0;\n`;\nconst CountComment = styled.div`\n  color: #aaa;\n  font-size: ${theme.sFont};\n`;\nconst Slush = styled.div`\n  color: #aaa;\n  margin: 0 2px 0;\n  font-size: ${theme.sFont};\n`;\nconst Maxcount = styled.span`\n  color: #aaa;\n  font-size: ${theme.sFont};\n`;\nconst MAX_COMMENT = 200;\n"],"mappings":"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","sourceRoot":""}