{"version":3,"file":"static/webpack/static/development/pages/mypage.js.65629d9d6991b24e8226.hot-update.js","sources":["webpack:///./src/components/common/PhotoUpload.js"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { useState, useRef, useCallback, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport ReactCrop from 'react-image-crop';\nimport { BlueEditBtn } from '../../utils/theme';\n\nexport default function Upload(props) {\n  const { imgFormData, prevImg, showEdit, clickEdit } = props;\n  const [file, setFile] = useState([null]);\n  const [upImg, setUpImg] = useState([]);\n  const [crop, setCrop] = useState({ unit: '%', width: 100, aspect: 1 });\n  const [previewUrl, setPreviewUrl] = useState([null]);\n  const [index, setIndex] = useState(null);\n  const [filename, setFilename] = useState('');\n  const [fileInfo, setFileInfo] = useState('');\n  const imgRef = useRef(null);\n  const userColor = useSelector(state => state.common.userColor);\n  const userInfo = useSelector(state => state.common.userInfo);\n  let inputRefs = useRef([]);\n  const controlFileBtn = (e, index) => {\n    e.preventDefault();\n    inputRefs.current[index].click();\n  };\n\n  const addImg = (e, index) => {\n    setIndex(index);\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n      setFilename(e.target.files[0].name);\n      setFileInfo(e.target.files[0].type);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n\n  const makeClientCrop = async crop => {\n    if (imgRef.current && crop.width && crop.height) {\n      createCropPreview(imgRef.current, crop, filename);\n    }\n  };\n\n  const createCropPreview = async (image, crop, fileName) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          reject(new Error('Canvas is empty'));\n          return;\n        }\n        blob.name = fileName;\n        window.URL.revokeObjectURL(previewUrl);\n        const tempPreviewUrl = [...previewUrl];\n        tempPreviewUrl.splice(index, 1, window.URL.createObjectURL(blob));\n        setPreviewUrl(tempPreviewUrl);\n        prevImg(tempPreviewUrl);\n\n        const blobToFile = new File([blob], filename);\n        const tempFile = [...file];\n        tempFile.splice(index, 1, blobToFile);\n        setFile(tempFile);\n      }, fileInfo);\n    }).catch(err => {\n      console.log('blob promise err', err);\n    });\n  };\n  useEffect(() => {\n    imgFormData(file);\n  }, [file]);\n\n  useEffect(() => {\n    setUpImg([]);\n  }, [showEdit]);\n\n  return (\n    <Row>\n      <TitleCenter onClick={e => clickEdit(e)}>프로필변경</TitleCenter>\n      <ProfileRow>\n        <ProfileCenter>\n          {showEdit && (\n            <EditWrap>\n              <EditImg src={'/images/edit.svg'} width={16} onClick={e => controlFileBtn(e, 0)} />\n            </EditWrap>\n          )}\n\n          <input\n            name=\"file\"\n            type=\"file\"\n            accept=\"image/*\"\n            ref={ref => (inputRefs.current[0] = ref)}\n            style={{ display: 'none' }}\n            onChange={e => addImg(e, 0)}\n          />\n\n          {showEdit && previewUrl && previewUrl[0] ? (\n            <Img src={previewUrl[0]} width={70} />\n          ) : (\n            <Img\n              src={userInfo && userInfo.profile_url ? userInfo.profile_url : '/images/default_profile.png'}\n              width={70}\n            />\n          )}\n        </ProfileCenter>\n      </ProfileRow>\n      {showEdit && (\n        <ProfileRow>\n          <ReactCropDiv\n            userColor={userColor}\n            src={upImg}\n            onImageLoaded={onLoad}\n            crop={crop}\n            onChange={img => setCrop(img)}\n            onComplete={makeClientCrop}\n            uploadImg={upImg}\n          />\n        </ProfileRow>\n      )}\n    </Row>\n  );\n}\nconst Row = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\nconst PreviewImg = styled.img`\n  width: 100%;\n`;\nconst ImageRow = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst ProfileRow = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin: 20px 0 20px;\n`;\nconst TitleCenter = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  margin: 20px 0;\n${BlueEditBtn}\ncolor:${userColor && userColor};\n  font-size: ${props => props.theme.mFont};\n`;\n\nconst ProfileCenter = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n`;\n\nconst ReactCropDiv = styled(ReactCrop)`\n  margin-bottom: ${props => (props.uploadImg.length > 0 ? '20px' : '0px')};\n  width: ${props => props.uploadImg.length && '200px'};\n  height: ${props => props.uploadImg.length && '200px'};\n`;\nconst EditImg = styled.img`\n  width: ${props => props.width || '30px'};\n  height: ${props => props.width || '30px'};\n  border-radius: ${props => props.width / 2 || 15}px;\n`;\nconst EditWrap = styled.div`\n  cursor: pointer;\n  background-color: #666;\n  position: absolute;\n  bottom: 0;\n  left: 46px;\n  margin-right: 0;\n  width: 24px;\n  height: 24px;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nconst Img = styled.img`\n  width: ${props => props.width || '30px'};\n  height: ${props => props.width || '30px'};\n  border-radius: ${props => props.width / 2 || 15}px;\n  margin-right: 0;\n  border: 1px solid #ddd;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AAAA;AAAA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AARA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyCA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAQA;AAAA;AAGA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;A","sourceRoot":""}